class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        if (n == 0) return -1; // handle empty array case

        int lo = 0, hi = n - 1;
        
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            
            if (nums[mid] == target) {
                return mid;
            }

            // Determine which part is sorted
            if (nums[lo] <= nums[mid]) { // left half is sorted
                if (nums[lo] <= target && target < nums[mid]) {
                    hi = mid - 1; // target is in the left sorted half
                } else {
                    lo = mid + 1; // target is in the right half
                }
            } else { // right half is sorted
                if (nums[mid] < target && target <= nums[hi]) {
                    lo = mid + 1; // target is in the right sorted half
                } else {
                    hi = mid - 1; // target is in the left half
                }
            }
        }
        
        return -1; // target not found
    }
};
